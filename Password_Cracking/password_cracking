#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

#define NUM_TYPES 7
#define MAX_LENGTH 8
#define MIN_LENGTH 4

char *generate_password(int type);
void crack_password(char *password);

int main()
{
    srand(time(NULL)); // 시드값 초기화

    for (int i = 0; i < NUM_TYPES; i++)
    {
        printf("Type %d passwords:\n", i + 1);

        for (int j = 0; j < 10; j++)
        {
            char *password = generate_password(i);
            printf("%s\n", password);
            crack_password(password);
            printf("\n");
            free(password); // 메모리 해제
        }
    }

    return 0;
}

char *generate_password(int type)
{
    char *password = (char *)malloc(MAX_LENGTH + 1);                  // 패스워드 버퍼 생성
    memset(password, 0, MAX_LENGTH + 1);                              // 패스워드 버퍼 초기화
    int length = rand() % (MAX_LENGTH - MIN_LENGTH + 1) + MIN_LENGTH; // 길이 랜덤 지정

    for (int i = 0; i < length; i++)
    {
        switch (type)
        {
        case 0: // 숫자
            password[i] = '0' + rand() % 10;
            break;
        case 1: // 알파벳
            password[i] = 'a' + rand() % 26;
            break;
        case 2:                              // 특수문자
            password[i] = '!' + rand() % 15; // 15개의 특수문자 중 랜덤 선택
            break;
        case 3: // (숫자, 알파벳)
            if (i % 2 == 0)
                password[i] = '0' + rand() % 10;
            else
                password[i] = 'a' + rand() % 26;
            break;
        case 4: // (알파벳, 특수문자)
            if (i % 2 == 0)
                password[i] = 'a' + rand() % 26;
            else
                password[i] = '!' + rand() % 15;
            break;
        case 5: // (숫자, 특수문자)
            if (i % 2 == 0)
                password[i] = '0' + rand() % 10;
            else
                password[i] = '!' + rand() % 15;
            break;
        case 6: // (숫자, 알파벳, 특수문자)
            if (i % 3 == 0)
                password[i] = '0' + rand() % 10;
            else if (i % 3 == 1)
                password[i] = 'a' + rand() % 26;
            else
                password[i] = '!' + rand() % 15;
            break;
        }
    }

    return password;
}

void crack_password(char *password)
{
    clock_t start = clock(); // 시작 시간 기록

    char *guess = (char *)malloc(MAX_LENGTH + 1); // 추측용 패스워드 버퍼 생성
    memset(guess, 0, MAX_LENGTH + 1);             // 추측용 패스워드 버퍼 초기화
    int length = strlen(password);

    // 무작위 대입공격
    while (strcmp(guess, password) != 0)
    {
        for (int i = 0; i < length; i++)
        {
            switch (rand() % 3)
            {
            case 0: // 숫자
                guess[i] = '0' + rand() % 10;
                break;
            case 1: // 알파벳
                guess[i] = 'a' + rand() % 26;
                break;
            case 2:                           // 특수문자
                guess[i] = '!' + rand() % 15; // 15개의 특수문자 중 랜덤 선택
                break;
            }
        }
    }

    clock_t end = clock(); // 종료 시간 기록
    printf("Cracked password: %s, time taken: %.3f seconds", guess, (double)(end - start) / CLOCKS_PER_SEC);

    free(guess); // 메모리 해제
}